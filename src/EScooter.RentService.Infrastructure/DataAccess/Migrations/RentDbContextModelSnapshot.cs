// <auto-generated />
using System;
using EScooter.RentService.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EScooter.RentService.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(RentDbContext))]
    partial class RentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("entities")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.CustomerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OngoingRentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OngoingRentId")
                        .IsUnique()
                        .HasFilter("[OngoingRentId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.RentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationTimestamp")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestTimestamp")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ScooterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StopReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StopTimestamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScooterId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.ScooterModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInStandby")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutOfService")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OngoingRentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OngoingRentId")
                        .IsUnique()
                        .HasFilter("[OngoingRentId] IS NOT NULL");

                    b.ToTable("Scooters");
                });

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.CustomerModel", b =>
                {
                    b.HasOne("EScooter.RentService.Infrastructure.DataAccess.Models.RentModel", "OngoingRent")
                        .WithOne()
                        .HasForeignKey("EScooter.RentService.Infrastructure.DataAccess.Models.CustomerModel", "OngoingRentId");

                    b.Navigation("OngoingRent");
                });

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.RentModel", b =>
                {
                    b.HasOne("EScooter.RentService.Infrastructure.DataAccess.Models.CustomerModel", "Customer")
                        .WithMany("Rents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EScooter.RentService.Infrastructure.DataAccess.Models.ScooterModel", "Scooter")
                        .WithMany("Rents")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Scooter");
                });

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.ScooterModel", b =>
                {
                    b.HasOne("EScooter.RentService.Infrastructure.DataAccess.Models.RentModel", "OngoingRent")
                        .WithOne()
                        .HasForeignKey("EScooter.RentService.Infrastructure.DataAccess.Models.ScooterModel", "OngoingRentId");

                    b.Navigation("OngoingRent");
                });

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.CustomerModel", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("EScooter.RentService.Infrastructure.DataAccess.Models.ScooterModel", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
